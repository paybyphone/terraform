package aws

import (
	"fmt"
	"sort"

	"github.com/aws/aws-sdk-go/service/ec2"
	"github.com/hashicorp/terraform/helper/resource"
	"github.com/hashicorp/terraform/helper/schema"
)

// AWS availability zones resource - get the availability zones available to
// your account/connection.
//
// Example:
//
// resource "aws_availability_zones" "availability_zones" {
//   filter {
//     name = "state"
//     values = "available"
//   }
//   zone_names = ["us-east-1a"]
// }
//
// Parameters:
//
// filter (Optional): One or more name/value pairs to filter off of.
// For a full reference, check out
// http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html.
//
// zone_names (Optional): A list of availability zones to directly filter for.
//
//
// Attributes Reference:
//
// Id - A unique ID generated by Terraform.
// availability_zones - The list or returned availability zones.
//

func resourceAwsAvailabilityZones() *schema.Resource {
	return &schema.Resource{
		Create: resourceAwsAvailabilityZonesRead,
		Read:   resourceAwsAvailabilityZonesRead,
		Delete: resourceAwsAvailabilityZonesDelete,

		Schema: map[string]*schema.Schema{
			"zone_names": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				ForceNew: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},
			"filter": &schema.Schema{
				Type:     schema.TypeSet,
				Optional: true,
				ForceNew: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": &schema.Schema{
							Type:     schema.TypeString,
							Required: true,
						},

						"values": &schema.Schema{
							Type:     schema.TypeList,
							Required: true,
							Elem:     &schema.Schema{Type: schema.TypeString},
						},
					},
				},
			},
			"availability_zones": &schema.Schema{
				Type:     schema.TypeList,
				Computed: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},
		},
	}
}

// Delete the "Resource".
func resourceAwsAvailabilityZonesDelete(d *schema.ResourceData, meta interface{}) error {
	d.SetId("")
	return nil
}

// Perform the AZ lookups.
func resourceAwsAvailabilityZonesRead(d *schema.ResourceData, meta interface{}) error {
	conn := meta.(*AWSClient).ec2conn

	filters, filtersOk := d.GetOk("filter")
	zones, zonesOk := d.GetOk("zone_names")

	params := &ec2.DescribeAvailabilityZonesInput{}
	if filtersOk {
		params.Filters = buildEc2Filters(filters.(*schema.Set))
	}
	if zonesOk {
		params.ZoneNames = expandStringList(zones.([]interface{}))
	}

	resp, err := conn.DescribeAvailabilityZones(params)
	if err != nil {
		return err
	}
	if len(resp.AvailabilityZones) < 1 {
		return fmt.Errorf("Your query returned no results. Please change your filters and try again.")
	}
	return azDescriptionAttributes(d, resp.AvailabilityZones)
}

// populate AZ output.
func azDescriptionAttributes(d *schema.ResourceData, zones []*ec2.AvailabilityZone) error {

	d.SetId(resource.UniqueId())

	var s []string

	for _, v := range zones {
		s = append(s, *v.ZoneName)
	}
	sort.Strings(s)
	d.Set("availability_zones", s)
	return nil
}

// Returns a set of tags.
func zoneMessages(m []*ec2.AvailabilityZoneMessage) []string {
	var s []string
	for _, v := range m {
		s = append(s, *v.Message)
	}
	return s
}
